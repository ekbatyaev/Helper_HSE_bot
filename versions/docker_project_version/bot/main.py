import json
import os
import math
import logging
import asyncio
from typing import Dict, Any
import requests
import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram import Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.storage.memory import MemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤

telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
notion_token = os.getenv("NOTION_TOKEN")
support_page_id = os.getenv("SUPPORT_PAGE_ID")
#common_questions_page_id = os.getenv("COMMON_QUESTION_PAGE_ID")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=telegram_bot_token)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
dp.include_router(user_router)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞

async def load_data(data_file):
    try:
        with open(data_file, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}  # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

#–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
common_questions_page_id = asyncio.run(load_data(f"emb_info.json")).get("common_questions").get("page_id")

#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏

async def get_pages(page_id, headers, num_pages=None):
    url = f"https://api.notion.com/v1/databases/{page_id}/query"
    get_all = num_pages is None
    page_size = 100 if get_all else num_pages
    payload = {"page_size": page_size}
    response = requests.post(url, json=payload, headers=headers)
    data = response.json()
    results = data["results"]

    while data["has_more"] and get_all:
        payload = {"page_size": page_size, "start_cursor": data["next_cursor"]}
        url = f"https://api.notion.com/v1/databases/{page_id}/query"
        response = requests.post(url, json=payload, headers=headers)
        data = response.json()
        results.extend(data["results"])

    return results

async def get_chat_info(page_id):
    token = notion_token
    headers = {
        "Authorization": "Bearer " + token,
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28",
    }
    page = await get_pages(page_id, headers)
    chat_info = []
    props = page[0]["properties"]
    Chat_name = props.get("Chat_name", {}).get("title", [{}])[0].get("text", {}).get("content", "")
    workers = props.get("Workers", {}).get("rich_text", [{}])[0].get("text", {}).get("content", "")
    chat_id = props.get("Chat_ID", {}).get("number", 0)
    chat_info.append([Chat_name, workers, chat_id])
    get_chat_id(chat_info[0])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤

async def get_questions(fac_page_id):
    token = notion_token
    headers = {
        "Authorization": "Bearer " + token,
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28",
    }
    index = 1
    list_str_questions = []
    for page_id in [common_questions_page_id, fac_page_id]:
        pages = await get_pages(page_id, headers)
        for i, page in enumerate(pages):
            props = page["properties"]
            question = "".join(
                [part.get("text", {}).get("content", "") for part in props.get("–í–æ–ø—Ä–æ—Å", {}).get("title", [])])
            list_str_questions.append(f"*{index + i}) *" + f"_{question}_")
        index+=len(pages)
    return list_str_questions

async def search(user_question: str, faculty_name: str) -> Dict[str, Any]:
    """
    –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ API
    """
    model_url = os.getenv("MODEL_API_URL")
    api_token = os.getenv("API_TOKEN")
    if not model_url or not api_token:
        logging.error("API configuration missing")
        return {
            "question": user_question,
            "score": 0,
            "error": "Configuration error",
            "answer": "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
        }

    payload = {
        "question": user_question,
        "faculty_name": faculty_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                    f"{model_url}?token={api_token}",
                    json=payload,
                    timeout=10
            ) as response:

                if response.status == 200:
                    return await response.json()
                else:
                    error_text = await response.text()
                    logging.error(f"Model API error: {response.status} - {error_text}")
                    return {
                        "question": user_question,
                        "score": 0,
                        "error": f"API error {response.status}",
                        "answer": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                    }

    except asyncio.TimeoutError:
        logging.error("Model API timeout")
        return {
            "question": user_question,
            "score": 0,
            "error": "Timeout",
            "answer": "–°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        }
    except Exception as e:
        logging.error(f"Connection error: {str(e)}")
        return {
            "question": user_question,
            "score": 0,
            "error": f"Connection error: {str(e)}",
            "answer": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º"
        }

# –ö–ª–∞—Å—Å—ã States

class MainStates(StatesGroup):
    start_state = State()
    problem_types = State()

class Faculties(StatesGroup):
    request_allocation = State()
    get_faculty = State()
    send_answer = State()

class Support(StatesGroup):
    get_id = State()
    back_request = State()
    feedback_answer = State()
    check_answer = State()
    status_answer = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é

def get_started():
    keyboard_list = [
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üöÄ", callback_data='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def get_faculty():
    keyboard_list = [
        [InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫ üíª', callback_data='fac_it')],
        [InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–∞—É–∫ üìö', callback_data='fac_gum')],
        [InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ üìä', callback_data='fac_man')],
        [InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç –ø—Ä–∞–≤–∞ ‚öñÔ∏è', callback_data='fac_law')],
        [InlineKeyboardButton(text='–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏ üíº', callback_data='fac_econ')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def get_main_options_choice():
    keyboard_list = [
        [InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì', callback_data='ask_question')],
        [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ üìú', callback_data='question_list')],
        [InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ üí¨', callback_data='support')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üè†', callback_data='back')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def get_outback_options():
    keyboard_list = [
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üè†', callback_data='back')],
        [InlineKeyboardButton(text='–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å ‚ùì', callback_data='ask_question')],
        [InlineKeyboardButton(text='–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω—É–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚ùå', callback_data='support')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–µ–≥–º–µ–Ω—Ç–∞ –°–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

def support_options():
    keyboard_list = [
        [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å ‚úçÔ∏è', callback_data='write_request')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üè†', callback_data='back')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def support_users_options():
    keyboard_list = [
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å üì§', callback_data='send_request')],
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚úçÔ∏è', callback_data='write_request')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üè†', callback_data='back')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def user_mark():
    keyboard_list = [
        [InlineKeyboardButton(text='–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω ‚úÖ', callback_data='accepted')],
        [InlineKeyboardButton(text='–Ø –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω—É–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚ùå', callback_data='not_accepted')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def check_answer():
    keyboard_list = [
        [InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç üì§', callback_data='send_answer')],
        [InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç ‚úçÔ∏è', callback_data='write_again')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥ üè†', callback_data='back')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard


# –ö–æ–º–∞–Ω–¥—ã


#–ö–æ–º–∞–Ω–¥–∞ /start

@user_router.message(Command("start"))
async def start_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(0.5)
        first_message = await message.answer(f"*–ü—Ä–∏–≤–µ—Ç, –≤—ã—à–∫–∏–Ω–µ—Ü!*" + "\n\n" +
                                             f"–Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –æ–±—É—á–µ–Ω–∏—è –≤ –í—ã—à–∫–µ." + "\n\n" +
                                             f"*–ê —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í—ã—à–∫–∏.*",
                                             reply_markup=get_started(), parse_mode="Markdown")
        await state.update_data(last_message_id=first_message.message_id)
        await state.update_data(message_edit = first_message)
    await state.set_state(MainStates.start_state)

#–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@user_router.message(Command("feedback_message"))
async def start_process_feed(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(0.5)
        await get_chat_info(support_page_id)
        if message.chat.id == chat_information[2]:
            feedback_message = await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ" + f"* ID —Å—Ç—É–¥–µ–Ω—Ç–∞,*" + f" –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç–µ.",
                                                    parse_mode="Markdown")
            await state.update_data(last_message_id=feedback_message.message_id)
            await state.set_state(Support.get_id)

#–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

@user_router.message(Command("request_to_kko"))
async def access_message(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(0.5)
        await get_chat_info(support_page_id)
        feedback_answer = await message.answer(f"*–í –¥–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ –±–æ—Ç–∞ *" + f"—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ " + f"*–ø–æ–¥–¥–µ—Ä–∂–∫—É.*" + "\n\n" +
                                        f"*–≠—Ç–æ —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å*" + f" –≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏ —É—á–µ–±–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ —Ç–∏–ø–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞–∫–æ–ø–∞ –∏ —ç–∫–∑–∞–º–µ–Ω–∞ –ü–£–î–£ –∏ –≤ —Ç.–ø —Å–ª—É—á–∞—è—Ö.",
                                               reply_markup=support_options(), parse_mode="Markdown")
        await state.update_data(last_message_id=feedback_answer.message_id)
        await state.set_state(Support.back_request)


# States

@user_router.callback_query(F.data == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', MainStates.start_state)
async def role_process(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message_edit = data.get("message_edit")
    await asyncio.sleep(0.5)
    faculty_question = await message_edit.edit_text(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ",
                                                    reply_markup = get_faculty(), parse_mode = "Markdown")
    await state.update_data(last_message_id=faculty_question.message_id)
    await state.set_state(MainStates.problem_types)

#–°–µ–≥–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º–∏

@user_router.callback_query(F.data.count("fac"), MainStates.problem_types)
async def role_process(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id = call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    main_choice = await call.message.answer(f"*–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å *" + "—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º "
                                         + f"*–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è *" + f"—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏?"
                              , reply_markup = get_main_options_choice(),parse_mode="Markdown")
    await state.update_data(last_message_id = main_choice.message_id)
    await state.update_data(faculty_name = call.data)
    await state.set_state(Faculties.request_allocation)

@user_router.callback_query(F.data == 'back', Faculties.request_allocation)
async def back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    back_message = await call.message.answer(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ",
                                                   reply_markup=get_faculty(), parse_mode="Markdown")
    await state.update_data(last_message_id=back_message.message_id)
    await state.set_state(MainStates.problem_types)

@user_router.callback_query(F.data == 'ask_question', Faculties.request_allocation)
async def back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message_to_edit = data.get("message_to_edit")
    last_message_id = data.get("last_message_id")
    if message_to_edit:
        answer_text = data.get("answer_for_question")
        await message_to_edit.edit_text(text = f"–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n" + answer_text, reply_markup = None, parse_mode = "Markdown")  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        if last_message_id:
            await asyncio.sleep(0.5)
            await bot.delete_message(chat_id=call.from_user.id,
                                    message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    question_message = await call.message.answer(f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. " + "\n\n" +
                                                 f"*–ü—Ä–∏–º–µ—Ä: *" + f"–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏ –ö–ù–¢.", parse_mode="Markdown")
    await state.update_data(last_message_id=question_message.message_id)
    await state.set_state(Faculties.send_answer)

@user_router.callback_query(F.data == "rephrase", Faculties.request_allocation)
async def back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    question_message = await call.message.answer(f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. " + "\n\n" +
                                                 f"*–ü—Ä–∏–º–µ—Ä: *" + f"–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ–± –æ–±—É—á–µ–Ω–∏–∏ –ö–ù–¢.", parse_mode="Markdown")
    await state.update_data(last_message_id=question_message.message_id)
    await state.set_state(Faculties.send_answer)


@user_router.message(F.text, Faculties.send_answer)
async def answer_options(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(0.5)
        data = await state.get_data()
        faculty_name = data.get("faculty_name")
        ai_thinking_message = await message.answer(f"_–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö_", parse_mode="Markdown")
        info_for_answer = await search(message.text, faculty_name)
        await ai_thinking_message.delete()
        if info_for_answer.get("error") is not None:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", parse_mode="Markdown")
            await asyncio.sleep(0.5)
            main_choice = await message.answer(f"*–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å *" + "—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º "
                                                    + f"*–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è *" + f"—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏?"
                                                    , reply_markup=get_main_options_choice(), parse_mode="Markdown")
            await state.update_data(last_message_id=main_choice.message_id)
            await state.set_state(Faculties.request_allocation)
            return
        answer_bot_message = await message.answer(f"–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n" + info_for_answer.get("answer"),
                                          reply_markup=get_outback_options(), parse_mode="Markdown")
        await state.update_data(message_to_edit = answer_bot_message)
        await state.update_data(answer_for_question = info_for_answer.get("answer"))
        await state.set_state(Faculties.request_allocation)


@user_router.callback_query(F.data == 'support', Faculties.request_allocation)
async def back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    message_to_edit = data.get("message_to_edit")
    if message_to_edit:
        answer_text = data.get("answer_for_question")
        await message_to_edit.edit_text(text = f"–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n\n" + answer_text, reply_markup = None, parse_mode = "Markdown")  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        if last_message_id:
            await asyncio.sleep(0.5)
            await bot.delete_message(chat_id=call.from_user.id,
                                    message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    await get_chat_info(support_page_id)
    support_message = await call.message.answer(f"*–í –¥–∞–Ω–Ω–æ–º –æ—Ç–¥–µ–ª–µ –±–æ—Ç–∞ *" + f"—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ " + f"*—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –í—ã—à–∫–∏.*" + "\n\n" +
                                            f"*–≠—Ç–æ —Å—Ç–æ–∏—Ç –¥–µ–ª–∞—Ç—å*" + f" –≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏ —É—á–µ–±–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ, –Ω–µ —Ç–∏–ø–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞–∫–æ–ø–∞ –∏ —ç–∫–∑–∞–º–µ–Ω–∞ –ü–£–î–£ –∏ –≤ —Ç.–ø —Å–ª—É—á–∞—è—Ö.",
                                            reply_markup=support_options(), parse_mode="Markdown")
    await state.update_data(last_message_id=support_message.message_id)
    await state.set_state(Support.back_request)

@user_router.callback_query(F.data == 'question_list', Faculties.request_allocation)
async def back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    faculty_name = data.get("faculty_name")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    wait_message = await call.message.answer(f"_–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤..._", parse_mode="Markdown")
    info_fac = await load_data(f"emb_info.json")
    list_of_questions = await get_questions(info_fac[faculty_name]["page_id"])
    await wait_message.delete()
    await asyncio.sleep(0.5)
    for i in range(math.ceil(len(list_of_questions) / 50)):
        start_index = i * 50
        end_index = start_index + 50
        question_chunk = list_of_questions[start_index:end_index]
        question_string = '\n'.join(question_chunk)
        await call.message.answer(f"{question_string}", parse_mode="Markdown")
    question_list_message = await call.message.answer(f"*–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å *" + f"—Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º "
                                                 + f"*–∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è *" + f"—Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏?"
                                                 , reply_markup=get_main_options_choice(), parse_mode="Markdown")
    await state.update_data(last_message_id=question_list_message.message_id)
    await state.set_state(Faculties.request_allocation)

# –†–∞–∑–¥–µ–ª —Ä–∞–±–æ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

@user_router.message(F.text, Support.get_id)
async def get_id(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        data = await state.get_data()
        request_message = await message.answer( f"–ü—Ä–∏—à–ª–∏—Ç–µ " + f"*–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å*" + f" —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                       parse_mode="Markdown")
        await state.update_data(last_message_id=request_message.message_id)
        await state.update_data(user_id = int(message.text))
        await state.set_state(Support.check_answer)

@user_router.message(F.text, Support.check_answer)
async def check_answer(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        user_id = data.get("user_id")
        if last_message_id:
            await bot.delete_message(chat_id=message.from_user.id,
                                     message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        check_message = await message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: " + "\n\n" + f"{message.text}" + '\n\n' + f"*ID —Å—Ç—É–¥–µ–Ω—Ç–∞: *" + "\n" + str(
                                        user_id),
                                             reply_markup=support_users_options(), parse_mode="Markdown")
        await state.update_data(ans_message = message.text)
        await state.update_data(last_message_id=check_message.message_id)
        await state.set_state(Support.status_answer)

@user_router.callback_query(F.data == 'send_answer', Support.status_answer)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    ans_message = data.get("ans_message")
    user_id = data.get("user_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    await call.message.answer(f"_–í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω._",
                                          parse_mode="Markdown")
    await bot.send_message(user_id, f"*–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏: *" + "\n\n" + f"{ans_message}",
                         reply_markup=user_mark(), parse_mode="Markdown")
    await state.set_state(Support.feedback_answer)

@user_router.callback_query(F.data == 'write_again', Support.status_answer)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    request_message = await bot.send_message(chat_information[2], f"–ü—Ä–∏—à–ª–∏—Ç–µ " + f"*–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å*" + f" —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                           parse_mode="Markdown")
    await state.update_data(last_message_id=request_message.message_id)
    await state.set_state(Support.check_answer)

@user_router.callback_query(F.data == 'write_again', Support.status_answer)
async def status_answer(call: CallbackQuery, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=call.chat.id):
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        if last_message_id:
            await bot.delete_message(chat_id=call.from_user.id,
                                     message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        request_message = await bot.send_message(chat_information[2],
                                                 f"–ü—Ä–∏—à–ª–∏—Ç–µ " + f"*–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å*" + f" —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                                                 parse_mode="Markdown")
        await state.update_data(last_message_id=request_message.message_id)
        await state.set_state(Support.check_answer)

@user_router.callback_query(F.data == 'back', Support.status_answer)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    feedback_message = await bot.send_message(chat_information[2], f"–ü—Ä–∏—à–ª–∏—Ç–µ" + f"* ID —Å—Ç—É–¥–µ–Ω—Ç–∞,*" + f" –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç–µ.",
                                                 parse_mode="Markdown")
    await state.update_data(last_message_id=feedback_message.message_id)
    await state.set_state(Support.get_id)

@user_router.callback_query(F.data == 'accepted', Support.feedback_answer)
async def feedback_answer(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"_–†–∞–¥ —Ç–µ–±–µ –ø–æ–º–æ—á—å!_", parse_mode="Markdown")
    next_message = await call.message.answer(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ",
                                            reply_markup=get_faculty(), parse_mode="Markdown")
    await state.update_data(last_message_id=next_message.message_id)
    await state.set_state(MainStates.problem_types)

@user_router.callback_query(F.data == 'not_accepted', Support.feedback_answer)
async def feedback_answer(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"–¢—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–¥–Ω–æ–º—É –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤" + f"* —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*" + "\n\n" + chat_information[1],
                         parse_mode="Markdown")
    next_message = call.message.answer(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ",
                                            reply_markup=get_faculty(), parse_mode="Markdown")
    await state.update_data(last_message_id=next_message.message_id)
    await state.set_state(MainStates.problem_types)

@user_router.callback_query(F.data == 'write_request', Support.back_request)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    explain_message = await call.message.answer(f"–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å: " + "\n\n" + f"–í —Ç–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ " + f"*—Ç—ã –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å*" + f" —Å–≤–æ–µ –§–ò–û, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É."
                                           , parse_mode="Markdown")
    await state.update_data(last_message_id=explain_message.message_id)
    await state.set_state(Support.back_request)

@user_router.message(F.text, Support.back_request)
async def request_check(message: Message, state: FSMContext):
    put_request_message(f"{message.text}")
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=message.from_user.id, message_id=last_message_id)
    await asyncio.sleep(0.5)
    request_message = await message.answer(f"–í–∞—à –∑–∞–ø—Ä–æ—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: " + "\n\n" + f"{message.text}" + "\n\n" +
                                           f"*–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–∞–ø–∏—Å–∞–ª–∏ –ª–∏ –≤—ã:*" + f"—É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –§–ò–û.",
                                           reply_markup=support_users_options(), parse_mode="Markdown")
    await state.update_data(last_message_id=request_message.message_id)
    await state.set_state(Support.back_request)

@user_router.callback_query(F.data == 'back', Support.back_request)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    first_message = await call.message.answer(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ", reply_markup=get_faculty(),
                                             parse_mode="Markdown")
    await state.update_data(last_message_id=first_message.message_id)
    await state.set_state(MainStates.problem_types)

@user_router.callback_query(F.data == 'send_request', Support.back_request)
async def status_answer(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    await bot.send_message(chat_information[2], f"*–ó–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: *" + "\n\n" + f"{request_message}" + "\n\n" + f"*ID —Å—Ç—É–¥–µ–Ω—Ç–∞: *" + "\n" + str(
                             call.message.from_user.id), parse_mode="Markdown")
    await call.message.answer(f"–í–∞—à –∑–∞–ø—Ä–æ—Å " + f"–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω " + f"*–≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.*" + "\n\n" +
                         f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ - " + f"*2 –¥–Ω—è.*", parse_mode="Markdown")


# Request for KKO

request_message = ""

def put_request_message(request):
    global request_message
    request_message = request

# Get chat id

chat_information = ['', '', 0]

def get_chat_id(storage_chat):
    global chat_information
    chat_information = storage_chat

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())